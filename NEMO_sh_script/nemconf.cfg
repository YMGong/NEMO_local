#!/bin/sh

function configure()
{
    # This function should configure all settings/modules needed to
    # later prepare the EC-Earth run directory and set variables used
    # in the run script

    # Configure paths for building/running EC-Earth

    #export ECEARTH3_BASE_DIR=${WRKDIR}/DONOTREMOVE/EC-Earth/ecearth3/trunk
    nemctrl_scr_dir=${ECEARTH3_BASE_DIR}/sources # it is an environment variable
    
    run_dir=${WRKDIR}/DONOTREMOVE/NEMOEXP/${exp_name}
    ini_data_dir=/proj/atm/EC-Earth/input-trunk-r4062

    if [ ! -d $nemctrl_scr_dir ]; then
	echo "NEMCTRL_SRC_DIR in config_run.xml is not a directory!"
	exit 1
    fi
    if [ ! -d $ini_data_dir ]; then
	echo "INI_DATA_DIR in config_run.xml is not a directory!"
	exit 1
    fi

    # File for standard output.
    # NOTE: This will be modified for restart jobs!
    #stdout_file=${start_dir}/out/$(basename ${SLURM_JOB_NAME}).out
    stdout_file=${start_dir}/out/stdout.out

    # Resubmit this job for automatic restarts? [true/false]
    # Also, add options for the resubmit command here.
    resubmit_job=true
    
    # Configure GRIBEX paths
    export LOCAL_DEFINITION_TEMPLATES=/appl/climate/gribex/nonCrayOriginalF2C/GNU/5.3/lib/gribtemplates

    # Configure GRIB API paths
    export GRIB_DEFINITION_PATH=/appl/climate/grib_api/1.23.1/CRAY/8.5/share/grib_api/definitions
    export GRIB_SAMPLES_PATH=/appl/climate/grib_api/1.23.1/CRAY/8.5/share/grib_api/ifs_samples/grib1
    export GRIB_BIN_PATH=/appl/climate/grib_api/1.23.1/CRAY/8.5/bin

    # Configure number of processors per node
    # in sisu 
    proc_per_node=24

    # Configure and load modules #changed 12032018 YG
    pre_load_modules_cmd="module load cray-hdf5-parallel cray-netcdf-hdf5parallel xios/2.0.990"
 
    # Add directories to the shared library search path
    if [ -n "" ]
    then
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}""
    fi

    ulimit -s unlimited
}

function launch()
{
     # check the processors numbers
     # version using aprun
     cmd="aprun"
     nnodes=0

     while (( "$#" ))
     do
         nranks=$1
         executable=./$(basename $2)
         shift
         shift

         cmd+=" -n $nranks $executable"

	 ((nnodes += (nranks -1) / proc_per_node + 1))

         while (( "$#" )) && [ "$1" != "--" ]
         do
             cmd+=" $1"
             shift
         done
         shift || true

         (( "$#" )) && cmd+=" :"
     done
     
     echo "nnodes: $nnodes"

     if [ $SLURM_JOB_NUM_NODES -ne $nnodes ]; then
        error "SLURM_JOB_NUM_NODES=$SLURM_JOB_NUM_NODES -ne nnodes=$nnodes"
     fi

     echo $cmd
     $cmd
}


function finalise()
{
    # This function should execute of any post run functionality, e.g.
    # platform dependent cleaning or a resubmit

    if ${resubmit_job} && [ $(date -d "${leg_end_date}" +%s) -lt $(date -d "${run_end_date}" +%s) ]
    then
        info "Resubmitting job for leg $((leg_number+1))"
        # Need to go to start_dir to find the run script
        cd ${start_dir}
        # Submit command
        # Note: This does not work of you specify a job name with sbatch -J jobname!
	sbatch $1 ##changed 19/03/18 by ygong

    fi
}
